apply plugin:  'jacoco'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def coreProject = "core"

project.afterEvaluate {
    tasks.create(
            name: "ciFullCoverageReport",
            type: JacocoReport
    ) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for ci build."

        reports {
            html.enabled = true
            xml.enabled = true
        }

        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/*databinding/**/*.*',
                '**/Manifest*.*',
                'android/**/*.*',
                '**/androidx/**/*.*'
        ]
        def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: excludes)
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)


        def coreJavaClasses = fileTree(dir: "../$coreProject/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: excludes)
        def coreKotlinClasses = fileTree(dir: "../$coreProject/build/tmp/kotlin-classes/debug", excludes: excludes)

        classDirectories = files([javaClasses, kotlinClasses,
                                  coreJavaClasses, coreKotlinClasses])

        sourceDirectories = files([
                "$project.projectDir/src/main/java",
                "$project.projectDir/src/debug/java",
                "$project.projectDir/src/main/kotlin",
                "$project.projectDir/src/debug/kotlin",

                "../$coreProject/src/main/java",
                "../$coreProject/src/debug/java",
                "../$coreProject/src/main/kotlin",
                "../$coreProject/src/debug/kotlin"
        ])


        def firebaseTestLabOutputDir = System.getenv('VDTESTING_DOWNLOADED_FILES_DIR')

        def connectedCoverageFile = fileTree(firebaseTestLabOutputDir)
                .matching {
            include "**/*.ec"
        }

        executionData = files(
//            "${project.buildDir}/jacoco/${testTaskName}.exec",
                connectedCoverageFile
//            "../$coreProject/build/jacoco/${testTaskName}.exec"
        )

        doLast {
            println("!!!!!! Coverage generated")
            println("!!!!!! $firebaseTestLabOutputDir")
        }
    }
}

//project.afterEvaluate {
//
//    android.applicationVariants.all { variant ->
//        def variantName = variant.name
//        def testTaskName = "test${variantName.capitalize()}UnitTest"
//        def uiTestCoverageTaskName = "create${variantName.capitalize()}CoverageReport"
//
//        tasks.create(
//                name: "${testTaskName}Coverage",
//                type: JacocoReport,
//                dependsOn: [":app:$testTaskName", ":app:$uiTestCoverageTaskName",
//                            ":$coreProject:$testTaskName"]
//        ) {
//            group = "Reporting"
//            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."
//
//            reports {
//                html.enabled = true
//                xml.enabled = true
//            }
//
//            def excludes = [
//                    '**/R.class',
//                    '**/R$*.class',
//                    '**/BuildConfig.*',
//                    '**/*databinding/**/*.*',
//                    '**/Manifest*.*',
//                    'android/**/*.*',
//                    '**/androidx/**/*.*'
//            ]
//            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
//            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
//
//
//            def coreJavaClasses = fileTree(dir: "../$coreProject/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: excludes)
//            def coreKotlinClasses = fileTree(dir: "../$coreProject/build/tmp/kotlin-classes/debug", excludes: excludes)
//
//            classDirectories = files([javaClasses, kotlinClasses,
//                                      coreJavaClasses, coreKotlinClasses])
//
//            sourceDirectories = files([
//                    "$project.projectDir/src/main/java",
//                    "$project.projectDir/src/${variantName}/java",
//                    "$project.projectDir/src/main/kotlin",
//                    "$project.projectDir/src/${variantName}/kotlin",
//
//                    "../$coreProject/src/main/java",
//                    "../$coreProject/src/${variantName}/java",
//                    "../$coreProject/src/main/kotlin",
//                    "../$coreProject/src/${variantName}/kotlin"
//            ])
//
//            def connectedCoverageFile = fileTree("build/outputs/code_coverage/${variantName}AndroidTest/connected")
//                    .matching {
//                include "**/*.ec"
//            }
//
//            executionData = files(
//                    "${project.buildDir}/jacoco/${testTaskName}.exec",
//                    connectedCoverageFile,
//                    "../$coreProject/build/jacoco/${testTaskName}.exec")
//
//            doLast {
//                println("See coverage report ${project.buildDir}/reports/jacoco/${name}/html/index.html")
//            }
//        }
//    }
//}